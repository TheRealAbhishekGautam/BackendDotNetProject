@model ProductsVM

<div class="card shadow border-0 my-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h1 class="text-white py-2">Create Product</h1>
            </div>
        </div>
    </div>
    <div class="card-body p-4">
       @*  We have to add the enctype for getting a input form this form as a file. *@
        <form method="post" class="row" enctype="multipart/form-data">
            <div class="border p-3">
                <div asp-validation-summary="ModelOnly"></div>
                <div class="form-floating py-2 col-12">
                    <input asp-for="@Model.Product.Title" class="form-control border-0 shadow" />
                    <label asp-for="@Model.Product.Title" class="ms-2"></label>
                    <span asp-validation-for="@Model.Product.Title" class="text-danger"></span>
                </div>
                <div class="form-floating py-2 col-12">
                    <TextArea asp-for="@Model.Product.Description" class="form-control border-0 shadow"></TextArea>
                    <label asp-for="@Model.Product.Description" class="ms-2"></label>
                    <span asp-validation-for="@Model.Product.Description" class="text-danger"></span>
                </div>
                <div class="form-floating py-2 col-12">
                    <input asp-for="@Model.Product.ISBN" class="form-control border-0 shadow" />
                    <label asp-for="@Model.Product.ISBN" class="ms-2"></label>
                    <span asp-validation-for="@Model.Product.ISBN" class="text-danger"></span>
                </div>
                @* 
                    @Model.Product.Author and Product.Author will do the same work.
                    View will automatically detect the properties of the model.
                *@
                <div class="form-floating py-2 col-12">
                    <input asp-for="Product.Author" class="form-control border-0 shadow" />
                    <label asp-for="Product.Author" class="ms-2"></label>
                    <span asp-validation-for="Product.Author" class="text-danger"></span>
                </div>
                <div class="form-floating py-2 col-12">
                    <input asp-for="Product.ListPrice" class="form-control border-0 shadow" />
                    <label asp-for="Product.ListPrice" class="ms-2"></label>
                    <span asp-validation-for="Product.ListPrice" class="text-danger"></span>
                </div>
                <div class="form-floating py-2 col-12">
                    <input asp-for="Product.Price" class="form-control border-0 shadow" />
                    <label asp-for="Product.Price" class="ms-2"></label>
                    <span asp-validation-for="Product.Price" class="text-danger"></span>
                </div>
                <div class="form-floating py-2 col-12">
                    <input asp-for="Product.Price50" class="form-control border-0 shadow" />
                    <label asp-for="Product.Price50" class="ms-2"></label>
                    <span asp-validation-for="Product.Price50" class="text-danger"></span>
                </div>
                <div class="form-floating py-2 col-12">
                    <input asp-for="Product.Price100" class="form-control border-0 shadow" />
                    <label asp-for="Product.Price100" class="ms-2"></label>
                    <span asp-validation-for="Product.Price100" class="text-danger"></span>
                </div>

                @* 
                    There's a tag helper asp-items which will accept an IEnumerable
                    and will iterate over it to display all of the values in the dropdown. 
                *@

                @*  When we are using ViewBag.
                <div class="form-floating py-2 col-12">
                    <select asp-for="CatagoryId" asp-items="ViewBag.CatagoryList" class="form-select border-0 shadow">
                        <option disabled selected>--Select Catagory--</option>
                    </select>
                    <label asp-for="CatagoryId" class="ms-2"></label>
                    <span asp-validation-for="CatagoryId" class="text-danger"></span>
                </div>
                *@
                @*  When we are using ViewBag.
                <div class="form-floating py-2 col-12">
                    <select asp-for="CatagoryId" asp-items="@(ViewData["CatagoryList"] as IEnumerable<SelectListItem>)" class="form-select border-0 shadow">
                        <option disabled selected>--Select Catagory--</option>
                    </select>
                    <label asp-for="CatagoryId" class="ms-2"></label>
                    <span asp-validation-for="CatagoryId" class="text-danger"></span>
                </div>
                *@
                @*  When we are using ViewModels. *@
                <div class="form-floating py-2 col-12">
                    <select asp-for="Product.CatagoryId" asp-items="@Model.CatagoryList" class="form-select border-0 shadow">
                        <option disabled selected>--Select Catagory--</option>
                    </select>
                    <label asp-for="Product.CatagoryId" class="ms-2"></label>
                    <span asp-validation-for="Product.CatagoryId" class="text-danger"></span>
                </div>
                <div class="form-floating py-2 col-12">
                    <input type="file" asp-for="Product.ImageUrl" class="form-control border-0 shadow" />
                    <label asp-for="Product.ImageUrl" class="ms-2"></label>
                </div>
                <div class="row pt-2">
                    <div class="col-6 col-md-3">
                        <button type="submit" class="btn btn-primary form-control">Create</button>
                    </div>
                    <div class="col-6 col-md-3">
                        <a asp-controller="Product" asp-action="Index" class="btn btn-outline-primary border form-control">Back to list</a>
                    </div>
                </div>
            </div>
        </form>

    </div>
</div>


@*
    We are new adding some Client side validation for that we are importing a partial view from the shared folder.
    Since inside the shared view, there's only scripts, we are adding scripts here too.
    partial keyword will find the partial view of the same name as given inside the Shared folder automatically.
*@

@section Scripts {
    @{
        <partial name="_ValidationScriptsPartial" />
    }
}